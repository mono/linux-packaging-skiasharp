<Type Name="SKCanvasLayer" FullName="SkiaSharp.Views.iOS.SKCanvasLayer">
  <TypeSignature Language="C#" Value="public class SKCanvasLayer : CoreAnimation.CALayer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SKCanvasLayer extends CoreAnimation.CALayer" />
  <AssemblyInfo>
    <AssemblyName>SkiaSharp.Views.iOS</AssemblyName>
    <AssemblyVersion>1.55.0.0</AssemblyVersion>
    <AssemblyVersion>1.56.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>CoreAnimation.CALayer</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>A CoreAnimation layer that can be drawn on using SkiaSharp drawing commands.</summary>
    <remarks>
      <para></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SKCanvasLayer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.55.0.0</AssemblyVersion>
        <AssemblyVersion>1.56.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of <see cref="T:SkiaSharp.Views.iOS.SKCanvasLayer" />.</summary>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanvasSize">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKSize CanvasSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype SkiaSharp.SKSize CanvasSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.55.0.0</AssemblyVersion>
        <AssemblyVersion>1.56.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current canvas size.</summary>
        <value></value>
        <remarks>The canvas size may be different to the view size as a result of the current device's pixel density.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.55.0.0</AssemblyVersion>
        <AssemblyVersion>1.56.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawInContext">
      <MemberSignature Language="C#" Value="public override void DrawInContext (CoreGraphics.CGContext ctx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void DrawInContext(class CoreGraphics.CGContext ctx) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.55.0.0</AssemblyVersion>
        <AssemblyVersion>1.56.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="CoreGraphics.CGContext" />
      </Parameters>
      <Docs>
        <param name="ctx">The prepared context to draw into.</param>
        <summary>Draws the layer on the specified context.</summary>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawInSurface">
      <MemberSignature Language="C#" Value="public virtual void DrawInSurface (SkiaSharp.SKSurface surface, SkiaSharp.SKImageInfo info);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawInSurface(class SkiaSharp.SKSurface surface, valuetype SkiaSharp.SKImageInfo info) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.55.0.0</AssemblyVersion>
        <AssemblyVersion>1.56.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="surface" Type="SkiaSharp.SKSurface" />
        <Parameter Name="info" Type="SkiaSharp.SKImageInfo" />
      </Parameters>
      <Docs>
        <param name="surface">The surface to draw on.</param>
        <param name="info">The information about the surface.</param>
        <summary>Implement this to draw on the canvas.</summary>
        <remarks>
          <para>There are two ways to draw on this surface: by overriding the <see cref="M:SkiaSharp.Views.iOS.SKCanvasLayer.DrawInSurface" /> method, or by attaching a handler to the <see cref="E:SkiaSharp.Views.iOS.SKCanvasLayer.PaintSurface" /> event. If the method is overriden, then the base must be called.</para>
          <para></para>
          <example>
            <code lang="C#"><![CDATA[public override void DrawInSurface (SKSurface surface, SKImageInfo info)
{
    // call the base method
    base.DrawInSurface (surface, info);

    var surfaceWidth = info.Width;
    var surfaceHeight = info.Height;

    var canvas = surface.Canvas;
    // draw on the canvas
    canvas.Flush ();
}]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnorePixelScaling">
      <MemberSignature Language="C#" Value="public bool IgnorePixelScaling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnorePixelScaling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.55.0.0</AssemblyVersion>
        <AssemblyVersion>1.56.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the drawing canvas should be resized on high resolution displays.</summary>
        <value>
          <para />
        </value>
        <remarks>By default, when false, the canvas is resized to 1 canvas pixel per display pixel. When true, the canvas is resized to device independent pixels, and then stretched to fill the view. Although performance is improved and all objects are the same size on different display densities, blurring and pixellation may occur.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PaintSurface">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;SkiaSharp.Views.iOS.SKPaintSurfaceEventArgs&gt; PaintSurface;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class SkiaSharp.Views.iOS.SKPaintSurfaceEventArgs&gt; PaintSurface" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.55.0.0</AssemblyVersion>
        <AssemblyVersion>1.56.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;SkiaSharp.Views.iOS.SKPaintSurfaceEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the the canvas needs to be re-drawn.</summary>
        <remarks>
          <para>There are two ways to draw on this surface: by overriding the <see cref="M:SkiaSharp.Views.iOS.SKCanvasLayer.DrawInSurface" /> method, or by attaching a handler to the <see cref="E:SkiaSharp.Views.iOS.SKCanvasLayer.PaintSurface" /> event.</para>
          <para></para>
          <example>
            <code lang="C#"><![CDATA[SKCanvasLayer myLayer = ...;

myLayer.PaintSurface += (sender, e) => {
    var surface = e.Surface;
    var surfaceWidth = e.Info.Width;
    var surfaceHeight = e.Info.Height;

    var canvas = surface.Canvas;
    // draw on the canvas
    canvas.Flush ();
};]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SKDelegate">
      <MemberSignature Language="C#" Value="public SkiaSharp.Views.iOS.ISKCanvasLayerDelegate SKDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class SkiaSharp.Views.iOS.ISKCanvasLayerDelegate SKDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.55.0.0</AssemblyVersion>
        <AssemblyVersion>1.56.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.Views.iOS.ISKCanvasLayerDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the layer’s delegate object.</summary>
        <value>
          <para></para>
        </value>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
