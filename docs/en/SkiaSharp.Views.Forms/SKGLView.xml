<Type Name="SKGLView" FullName="SkiaSharp.Views.Forms.SKGLView">
  <TypeSignature Language="C#" Value="public class SKGLView : Xamarin.Forms.View" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SKGLView extends Xamarin.Forms.View implements class Xamarin.Forms.IElementController, class Xamarin.Forms.IViewController, class Xamarin.Forms.IVisualElementController" />
  <AssemblyInfo>
    <AssemblyName>SkiaSharp.Views.Forms</AssemblyName>
    <AssemblyVersion>1.55.0.0</AssemblyVersion>
    <AssemblyVersion>1.56.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Xamarin.Forms.View</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Xamarin.Forms.RenderWith(typeof(SkiaSharp.Views.Forms.SKGLViewRenderer))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A hardware-accelerated view that can be drawn on using SkiaSharp drawing commands.</summary>
    <remarks>
      <para></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SKGLView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.55.0.0</AssemblyVersion>
        <AssemblyVersion>1.56.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates a new instance of the <see cref="T:SkiaSharp.Views.Forms.SKGLView" /> view.</summary>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanvasSize">
      <MemberSignature Language="C#" Value="public SkiaSharp.SKSize CanvasSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype SkiaSharp.SKSize CanvasSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.55.0.0</AssemblyVersion>
        <AssemblyVersion>1.56.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>SkiaSharp.SKSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current canvas size.</summary>
        <value />
        <remarks>The canvas size may be different to the view size as a result of the current device's pixel density.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasRenderLoop">
      <MemberSignature Language="C#" Value="public bool HasRenderLoop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasRenderLoop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.55.0.0</AssemblyVersion>
        <AssemblyVersion>1.56.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether the surface is drawn using a render loop.</summary>
        <value />
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasRenderLoopProperty">
      <MemberSignature Language="C#" Value="public static readonly Xamarin.Forms.BindableProperty HasRenderLoopProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class Xamarin.Forms.BindableProperty HasRenderLoopProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.55.0.0</AssemblyVersion>
        <AssemblyVersion>1.56.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.Forms.BindableProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies the <see cref="P:SkiaSharp.Views.Forms.SKGLView.HasRenderLoop" /> bindable property.</summary>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateSurface">
      <MemberSignature Language="C#" Value="public void InvalidateSurface ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateSurface() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.55.0.0</AssemblyVersion>
        <AssemblyVersion>1.56.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Informs the surface that it needs to redraw itself.</summary>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPaintSurface">
      <MemberSignature Language="C#" Value="protected virtual void OnPaintSurface (SkiaSharp.Views.Forms.SKPaintGLSurfaceEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaintSurface(class SkiaSharp.Views.Forms.SKPaintGLSurfaceEventArgs e) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.55.0.0</AssemblyVersion>
        <AssemblyVersion>1.56.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="SkiaSharp.Views.Forms.SKPaintGLSurfaceEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">The event arguments that contain the drawing surface and information.</param>
        <summary>Implement this to draw on the surface.</summary>
        <remarks>
          <para>There are two ways to draw on this surface: by overriding the <see cref="M:SkiaSharp.Views.Forms.SKGLView.OnPaintSurface" /> method, or by attaching a handler to the <see cref="E:SkiaSharp.Views.Forms.SKGLView.PaintSurface" /> event. If the method is overriden, then the base must be called.</para>
          <para></para>
          <example>
            <code lang="C#"><![CDATA[protected override void OnPaintSurface (SKPaintGLSurfaceEventArgs e)
{
    // call the base method
    base.OnPaintSurface (e);

    var surface = e.Surface;
    var surfaceWidth = e.RenderTarget.Width;
    var surfaceHeight = e.RenderTarget.Height;

    var canvas = surface.Canvas;
    // draw on the canvas
    canvas.Flush ();
}]]></code>
          </example>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaintSurface">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;SkiaSharp.Views.Forms.SKPaintGLSurfaceEventArgs&gt; PaintSurface;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class SkiaSharp.Views.Forms.SKPaintGLSurfaceEventArgs&gt; PaintSurface" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.55.0.0</AssemblyVersion>
        <AssemblyVersion>1.56.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;SkiaSharp.Views.Forms.SKPaintGLSurfaceEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Occurs when the surface needs to be re-drawn.</summary>
        <remarks>
          <para>There are two ways to draw on this surface: by overriding the <see cref="M:SkiaSharp.Views.Forms.SKGLView.OnPaintSurface" /> method, or by attaching a handler to the <see cref="E:SkiaSharp.Views.Forms.SKGLView.PaintSurface" /> event.</para>
          <para></para>
          <example>
            <code lang="C#"><![CDATA[SKGLView myView = ...;

myView.PaintSurface += (sender, e) => {
    var surface = e.Surface;
    var surfaceWidth = e.RenderTarget.Width;
    var surfaceHeight = e.RenderTarget.Height;

    var canvas = surface.Canvas;
    // draw on the canvas
    canvas.Flush ();
};]]></code>
          </example>
          <para></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
